M = [1,2;2,1]
M = [1,2,3;4,5,6;7,8,10]

//    char F[100] = "2X^2 + 4X + 1";
//    printf("F(X) = %s is of degree %d\n", F, degreeOfString(F, 0, length(F)+1));
//    Polynomial *P = stringToPolynomial(F, 0, length(F) + 1);
//    printf("Polynomial form : "); printPolynomial(P);
//    printSolutions(solve(P));

//    Matrix *chat = newMatrix(2, 2, 1);
//    chat->values[0][0] = 3; chat->values[1][1] = 3;
//    printMatrix(chat);
//    printMatrix(triangularise(chat));

//    Matrix *M = newMatrix(4, 3, 0);
//    M->values[0][0] = 4; M->values[0][1] = 3; M->values[0][2] = 1;
//    M->values[1][0] = 1; M->values[1][1] = 2; M->values[1][2] = 2;
//    M->values[3][0] = 5; M->values[3][1] = 5; M->values[3][2] = 2;
//    solveAugmentedMatrix(M);

//    Matrix *M = newMatrix(2, 2, 0);
//    M->values[0][0] = 1; M->values[0][1] = 2;
//    M->values[1][0] = 0; M->values[1][1] = 3;
//    //solveForVectors(solveAugmentedMatrix(M));
//    char *temp = detOfStringMatrix(changeToPLambdaForm(toStringMatrix(M)));
//    printPolynomial(stringToPolynomial(temp, 0, length(temp) + 1));
//    M->values[0][0] -= 1; M->values[1][1] -= 1;
//    printMatrix(solveAugmentedMatrix(M));
//    printMatrix(eigenVectors(M));

//    Matrix *M = newMatrix(3, 3, 0);
//    M->name = "M";
//    M->values[0][0] = 1; M->values[0][1] = 2; M->values[0][2] = 3;
//    M->values[1][0] = 0; M->values[1][1] = 0; M->values[1][2] = 0;
//    M->values[2][0] = 0; M->values[2][1] = 0; M->values[2][2] = 0;
//    printMatrix(M);

//    solveForVectors(solveAugmentedMatrix(M));
//    char *temp = detOfStringMatrix(changeToPLambdaForm(toStringMatrix(M)));
//    printPolynomial(stringToPolynomial(temp, 0, length(temp) + 1));
//    printMatrix(solveAugmentedMatrix(M));
//    printMatrix(eigenVectors(M));
//    printMatrix(eigenVectors(M));
//    printMatrix(triangularise(M));

//Assign the result if equal
    if (containString(command, "=") == 1) {
        Register *result = nextCommand(mainRegister, extractBetweenChar(command, '=', '\0'));
        if (result != NULL && result->listOfPolynomials != NULL) {
            result->listOfPolynomials[0]->name = firstWord(command);
        } else if (result != NULL && result->listOfMatrices != NULL) {
            result->listOfMatrices[0]->name = firstWord(command);
        }
        return result;
        //Do addition of left and right part
    } else if (containString(command, "+") == 1 || containString(command, "-") == 1) {
        char *objectName = firstWord(command);
        Register *result = nextCommand(mainRegister, extractBetweenIndexes(command, firstOccurrenceOf(command, '+') + 1, length(command) + 1));
        if (result->listOfPolynomials != NULL) {
            result->listOfPolynomials[0] = pAdd(searchPolynomial(mainRegister, objectName), result->listOfPolynomials[0]);
        } else if (result->listOfMatrices != NULL) {
            result->listOfMatrices[0] = sum(searchMatrix(mainRegister, objectName), result->listOfMatrices[0]);
        }
        return result;
    } else if (containString(command, "*") == 1) {
        char *objectName = firstWord(command);
        Register *result = extractObject(mainRegister, extractBetweenIndexes(command, firstOccurrenceOf(command, '*'), length(command) + 1));
        if (result->listOfPolynomials != NULL) {
            result->listOfPolynomials[0] = pMultiply(searchPolynomial(mainRegister, objectName), result->listOfPolynomials[0]);
        } else if (result->listOfMatrices != NULL) {
            result->listOfMatrices[0] = multiply(searchMatrix(mainRegister, objectName), result->listOfMatrices[0]);
        }
        return result;